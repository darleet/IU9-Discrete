package main

import (
	"fmt"
)

func encode(utf32 []rune) []byte {
	// –°–ª–∞–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	utf8 := make([]byte, 0)

	for _, symbol := range utf32 {
		// –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –≤ utf-8
		var octets int
		switch {
		case symbol >= 1<<16:
			octets = 4
		case symbol >= 1<<11:
			octets = 3
		case symbol >= 1<<7:
			octets = 2
		default:
			octets = 1
		}

		// –°–ª–∞–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ –≤ []byte
		result := make([]byte, 0)

		// –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
		for i := 0; i < octets; i++ {
			// –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–∞–π—Ç–∞ 10...
			if len(result) > 0 {
				result[0] += 1 << 7
			}
			// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –±–∞–π—Ç
			result = append(make([]byte, 1), result...)
			// –í k –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è 2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
			var k byte = 1
			for j := 0; j < 6; j++ {
				result[0] += byte(symbol&1) * k
				k = k << 1
				symbol = symbol >> 1
			}
		}

		// –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—Å–µ–≥–æ –æ–¥–∏–Ω –æ–∫—Ç–µ—Ç
		if octets == 1 {
			result[0] += byte(symbol) * 1 << 6
		} else {
			var k byte = 1 << 7
			for i := 0; i < octets; i++ {
				result[0] += k
				k = k >> 1
			}
		}

		// –î–æ–±–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–∞–π—Å
		// —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		utf8 = append(utf8, result...)
	}

	return utf8
}

func decode(utf8 []byte) []rune {
	// –°–ª–∞–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	utf32 := make([]rune, 0)
	octetCounter := 0

	for _, element := range utf8 {
		if element&(1<<7) == 0 { // –ï—Å–ª–∏ –±–∞–π—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è
			utf32 = append(utf32, rune(element))
		} else if element&(1<<7) == 1<<7 && element&(1<<6) == 0 { // –ï—Å–ª–∏ –±–∞–π—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 10
			interpretation := rune(element) & (1<<7 - 1) << (octetCounter * 6)
			utf32[len(utf32)-1] += interpretation
			octetCounter--
		} else { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–π—Ç
			// k –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–æ–ª—å –ø–æ—Å–ª–µ –µ–¥–∏–Ω–∏—Ü
			k := 5
			// –±—É–¥–µ–º —É–º–µ–Ω—å—à–∞—Ç—å k –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º –Ω–æ–ª—å
			for ; rune(element)&(1<<k) != 0; k-- {
			}
			// octetCounter –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–∫—Ç–µ—Ç
			octetCounter = 6 - k
			interpretation := rune(element) & (1<<k - 1) << (octetCounter * 6)
			utf32 = append(utf32, interpretation)
			octetCounter--
		}
	}

	return utf32
}

func main() {
	fmt.Print([]byte("êçà"))
	fmt.Print([]rune("êçà"))
	fmt.Print(encode([]rune("êçà")))
	fmt.Println(decode([]byte("êçà")))

	fmt.Print([]byte("$"))
	fmt.Print([]rune("$"))
	fmt.Print(encode([]rune("$")))
	fmt.Println(decode([]byte("$")))

	fmt.Print([]byte("¬¢"))
	fmt.Print([]rune("¬¢"))
	fmt.Print(encode([]rune("¬¢")))
	fmt.Println(decode([]byte("¬¢")))

	fmt.Print([]byte("‚Ç¨"))
	fmt.Print([]rune("‚Ç¨"))
	fmt.Print(encode([]rune("‚Ç¨")))
	fmt.Println(decode([]byte("‚Ç¨")))
}
